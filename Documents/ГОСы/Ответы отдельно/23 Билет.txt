1. Тестовые вопросы:
Изменение цены одного из товаров при прочих равных условиях:
 б) вызовет изменение наклона бюджетной линии
 Если цена одного товара изменяется, а доход и цена другого остаются прежними — изменяется наклон.
Положительный внешний эффект производства может быть следствием:
 г) производства лекарственных средств
 Такой эффект — это выгода для общества, не оплаченная и не включённая в цену.
Прямое влияние на увеличение количества денег в обращении оказывает:
 г) рост цен выпускаемых товаров
 Рост цен увеличивает потребность в большем количестве денег для покупок — это влияет на количество денег в обращении.
Торговый баланс:
 а) является частью платежного баланса
 Он учитывает разницу между экспортом и импортом товаров и входит в текущий счёт платежного баланса.
Форма собственности: государство — владелец, коллектив использует здание за плату:
 а) государственная
 Собственность остаётся за государством, а коллектив — лишь временный пользователь.

2. Сравнительная характеристика моделей данных
Модель данных — это способ представления информации в базе данных. Существует несколько типов моделей, каждая со своими преимуществами и областью применения.

Основные модели данных:
1. Иерархическая модель:
Данные организованы по принципу дерева: один родитель — много потомков.
Пример: структура каталогов на компьютере.
Плюсы:
Быстрый доступ при фиксированной структуре.
Простая навигация по иерархии.
Минусы:
Жёсткие связи, трудно перестраивать.
Неэффективна при изменении связей.

2. Сетевая модель:
Каждая запись может иметь несколько связей с другими.
Подходит для сложных взаимосвязей (например, проекты и исполнители).
Плюсы:
Гибче иерархической.
Поддерживает M:N связи.
Минусы:
Сложность в управлении.
Неудобна для визуализации и понимания.

3. Реляционная модель (наиболее распространена):
Данные хранятся в таблицах.
Используются ключи, индексы, связи между таблицами.
Плюсы:
Универсальность, поддержка SQL.
Хорошая нормализация и целостность данных.
Минусы:
Неудобна для вложенных или гибких структур.

4. Объектно-ориентированная модель:
Данные хранятся в виде объектов (как в ООП).
Поддержка сложных типов: списки, вложенные объекты.
Плюсы:
Близка к логике программирования.
Удобна для сложных приложений.
Минусы:
Низкая совместимость с реляционными СУБД.
Меньшая распространённость.

5. Документно-ориентированная (NoSQL):
Данные хранятся в виде документов (JSON, BSON).
Пример: MongoDB.
Плюсы:
Гибкость, не требует жёсткой схемы.
Хорошо масштабируется.
Минусы:
Сложности с транзакциями.
Нет строгих связей между объектами.

Вывод:
Выбор модели зависит от требований к структуре, скорости, типу данных и способу доступа. Реляционная модель — стандарт в большинстве бизнес-приложений, NoSQL и объектные — хороши для гибких, распределённых систем.

3. Объектно-ориентированные концепции построения информационных систем
Объектно-ориентированная концепция (ОО-концепция) — это метод построения информационных систем (ИС), в основе которого лежит объектно-ориентированное программирование (ООП) и представление компонентов системы как объектов с состоянием и поведением.

Основные принципы ОО-концепции:
1. Инкапсуляция
Объект скрывает внутреннюю реализацию, открывая только нужные данные и методы.
Обеспечивает надёжность и упрощает сопровождение.
2. Наследование
Возможность создавать новые объекты на основе уже существующих, переиспользуя код.
3. Полиморфизм
Одинаковый интерфейс может иметь разную реализацию.
Пример: метод print() у разных классов работает по-разному, но вызывается одинаково.
4. Абстракция
Модель выделяет только существенные характеристики объектов, игнорируя неважные.

Преимущества объектно-ориентированного подхода:
Хорошая масштабируемость и модульность.
Возможность переиспользовать компоненты.
Подходит для сложных ИС с разнообразной логикой.
Легко перейти от анализа к реализации — классы в модели становятся классами в коде.

Применение:
ERP-системы, CRM, облачные сервисы.
Пример: объект «Пользователь» может содержать логин, пароль, методы входа, выхода, обновления профиля.

Инструменты:
UML (Unified Modeling Language) — основной язык моделирования ОО-систем.
CASE-средства:
Enterprise Architect
Visual Paradigm
StarUML

Вывод:
Объектно-ориентированный подход делает проектирование ИС более гибким, логичным и приближенным к реальной структуре программного кода, что упрощает как разработку, так и поддержку.