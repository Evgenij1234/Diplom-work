1. Тестовые вопросы:
Если переменным фактором спроса является только цена, то изменяется:
 б) только величина спроса
 При изменении цены происходит движение вдоль кривой спроса, а не её сдвиг.
Спрос на факторы производства отличает от спроса на продукт его:
 г) производный характер
 Потребность в ресурсах зависит от спроса на конечный продукт.
Согласно закону Оукена, превышение безработицы на 2% означает, что ВВП отстаёт на:
 в) 4%
 Закон Оукена: 1% ↑ безработицы ≈ 2% ↓ ВВП по сравнению с потенциальным.
Встроенные стабилизаторы остаются безразличными к изменениям:
 а) платежного баланса
 Они автоматически реагируют на внутренние экономические изменения (доход, занятость), но не на внешнеторговые показатели.
Если спрос на товар эластичный, то снижение цены приведёт к:
 а) повышению дохода от продажи данного товара
 Так как количество проданного товара возрастёт сильнее, чем упала цена.

2. Сравнительная характеристика структур хранения данных
Структуры хранения данных — это способы организации информации в базах данных и информационных системах. От выбора структуры зависит скорость работы, удобство обработки и масштабируемость.

1. Табличная (реляционная) структура:
Форма: строки и столбцы (таблицы).
Пример: MySQL, PostgreSQL.
Плюсы: удобна для стандартных бизнес-данных (клиенты, заказы).
Минусы: плохо справляется с вложенными или гибкими структурами.

2. Иерархическая структура:
Форма: дерево, один "родитель" — много "детей".
Пример: XML-документы, старые СУБД (IMS).
Плюсы: понятна визуально, быстра при иерархическом доступе.
Минусы: негибкая, тяжело модифицировать.

3. Сетевая структура:
Форма: записи связаны множественными путями (граф).
Плюсы: позволяет задавать сложные связи.
Минусы: сложно управлять, неудобна для типовых задач.

4. Объектная структура:
Форма: объекты, как в ООП, с методами и полями.
Пример: ObjectDB, db4o.
Плюсы: удобно для приложений, где логика работы тесно связана с данными.
Минусы: ниже производительность при большом объеме данных.

5. Документно-ориентированная (NoSQL):
Форма: JSON, BSON, XML — документы.
Пример: MongoDB, CouchDB.
Плюсы: гибкость, легко хранить неструктурированные данные.
Минусы: нет строгих связей, ограниченная поддержка транзакций.

6. Ключ-значение (Key-Value):
Форма: пара "ключ — значение".
Пример: Redis, DynamoDB.
Плюсы: очень быстро, просто.
Минусы: мало структурности, плохо подходит для сложных запросов.

Вывод:
Выбор структуры зависит от задач.
Реляционная — для чётких, структурированных данных.
NoSQL — для гибкости и масштабируемости.
Объектная — для тесной интеграции с программным кодом.

3. Особенности построения информационных систем, основанных на модели COMET
COMET (Collaborative Object Modeling and Architectural Design Method) — это методология проектирования информационных систем на основе объектно-ориентированного моделирования, разработанная для создания надежных, гибких и масштабируемых приложений, особенно в распределённых системах.

Ключевые особенности модели COMET:
Основывается на UML и ООП:
Использует классы, объекты, связи, интерфейсы.
Широко применяет диаграммы компонентов, последовательностей, классов.
Разделение логики по архитектурным слоям:
Представление (UI) — интерфейс пользователя.
Бизнес-логика (доменный слой) — правила и процессы.
Управление взаимодействием (control) — связь между слоями.
Доступ к данным (persistence) — работа с базой данных.
Поддержка паттернов проектирования:
COMET активно использует шаблоны проектирования (MVC, фабрики, наблюдатель и др.).
Это повышает переиспользуемость кода и надёжность.
Масштабируемость и модульность:
COMET позволяет легко разрабатывать распределённые приложения (например, клиент-сервер, микросервисы).
Чёткое разграничение ответственности между компонентами.

Преимущества COMET:
Ясная архитектура и логика.
Удобно для командной разработки.
Подходит для сложных, распределённых и долго живущих систем.
Легко внедрять изменения.

Пример применения:
При создании корпоративной CRM-системы по COMET:
Выделяют бизнес-объекты: Клиент, Сделка, Контакт.
Определяют логику обработки заказов.
Создают интерфейс (веб или десктоп).
Изолируют слой данных (связь с базой).
Используют шаблоны, чтобы обеспечить стабильность и поддержку.

Вывод:
COMET — мощный объектно-ориентированный подход, который помогает строить структурированные, масштабируемые и гибкие ИС, особенно если они сложны или рассчитаны на долгосрочное развитие.