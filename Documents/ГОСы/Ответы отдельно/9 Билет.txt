1. Тестовые вопросы:
Если цена билета — 200 руб, матч длится 3 часа, а зарплата — 700 руб/час, то альтернативные издержки:
 г) 900
 Альтернативные издержки — это потерянный заработок за 3 часа: 700 × 3 = 2100 руб. Но так как билет стоит 200, а не только время, правильный ответ — 2100. Поэтому:
 Правильный ответ: а) 2100
В условиях совершенной конкуренции в долгосрочном периоде соблюдается равенство:
 б) MR = MC = AC = P
 В долгосрочном равновесии фирма не получает сверхприбыли, все выручки и издержки уравновешены.
Для депрессии НЕ характерны:
 б) затоваривание и падение цен
 Это характерно скорее для кризиса, а депрессия — это уже затяжная фаза, где уровень цен может стабилизироваться или даже начать расти.
Классический вариант кривой AS предполагает, что в долгосрочном периоде изменение совокупного спроса:
 б) окажет воздействие на уровень цен, но не на объем выпуска
 В классической модели ВВП определяется факторами предложения, а спрос влияет только на цены.
На рынке совершенной конкуренции отдельный продавец:
 а) не влияет на цену
 Он "принимает" рыночную цену как данность.

2. Назначение реляционной алгебры и реляционного исчисления. Начальная реляционная алгебра Э. Кодда
Реляционная алгебра и реляционное исчисление — это формальные языки работы с базами данных, разработанные Эдгаром Коддом, чтобы строго описывать запросы к реляционным базам данных.
Зачем нужны:
Обеспечивают теоретическую основу для работы SQL и других языков запросов.
Позволяют строго и формально описывать выборку, фильтрацию и объединение данных.
Используются при оптимизации запросов и построении компиляторов СУБД.

Реляционная алгебра
Это набор операций над таблицами (отношениями), результатом которых тоже является таблица.
Основные операции:
Выборка (σ) — фильтрация строк по условию.
 Пример: выбрать всех сотрудников с зарплатой > 50000.
Проекция (π) — выбор определённых столбцов.
 Например: только имена и должности из таблицы сотрудников.
Объединение (∪) — объединяет строки из двух таблиц с одинаковой структурой.
Пересечение (∩) — только те строки, которые есть в обеих таблицах.
Разность (-) — строки, которые есть в одной таблице, но нет в другой.
Декартово произведение (×) — соединяет все строки двух таблиц попарно.
Сочетание (Join) — объединяет таблицы по какому-либо условию.

Реляционное исчисление
В отличие от алгебры, здесь описывается не как получить результат, а каким он должен быть. Это декларативный подход.
Есть два вида:
Кортежное исчисление — работает с кортежами (строками).
Доменное исчисление — работает с отдельными значениями (ячейками).
Пример:
«Найти такие X, где X — имя студента, и студент учится на 4 курсе».
(Это как логическое высказывание, а не SQL-запрос.)

Зачем это важно:
Эти формализмы легли в основу SQL.
Помогают понять, как работают СУБД "внутри".
Используются в теоретических дисциплинах, оптимизации запросов, построении планов выполнения.

3. CASE-метод Баркера
CASE-метод Баркера — это метод структурного анализа информационных систем, разработанный Ричардом Баркером, и применяемый в рамках CASE-средств (Computer-Aided Software Engineering).
Он входит в семейство методологий SSADM (Structured Systems Analysis and Design Method) — стандарт Великобритании для проектирования ИС.

Основные идеи метода:
Разделение проектирования на три модели:
Модель данных — показывает, какие данные хранит система (через ER-диаграммы).
Функциональная модель — показывает, что делает система (через DFD — диаграммы потоков данных).
Модель поведения (событийная модель) — как система реагирует на внешние события.
Использование ER-диаграмм:
Поддержка нормализации, ключей, атрибутов, связей.
Сильная проработка понятий обязательности, мощности связей и правил целостности.
Формализация требований:
Чёткая документация требований заказчика, пошаговая декомпозиция функций.
Акцент на гибкость и повторное использование компонентов.
Интеграция с CASE-инструментами:
Метод Баркера реализован в инструментах вроде Oracle Designer, Visible Analyst и др.
Позволяет автоматизировать часть проектных работ и даже генерировать SQL-код.

Пример:
При проектировании системы учета студентов можно с помощью метода Баркера:
Построить ER-диаграмму с сущностями "Студент", "Курс", "Успеваемость".
Нарисовать диаграмму потоков: "Добавить оценку", "Сформировать отчёт".
Определить события: "Начало семестра", "Закрытие сессии".

Итог:
CASE-метод Баркера — это мощный и формальный подход к проектированию ИС, который помогает грамотно описывать структуру данных и бизнес-логику системы ещё до её реализации.