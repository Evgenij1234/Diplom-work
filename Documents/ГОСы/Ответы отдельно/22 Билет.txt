1. Тестовые вопросы:
Предельная полезность — это:
 б) полезность, которую потребитель получает от потребления дополнительной единицы блага
 Это прирост удовлетворения от каждой следующей единицы товара. Обычно она снижается с каждой новой единицей (закон убывающей предельной полезности).
Кривая Лоренца за три года сдвинулась дальше от биссектрисы. Это означает:
 г) усиление дифференциации доходов населения
 Чем дальше кривая от идеального равенства (биссектрисы), тем выше неравенство.
М1 включает в себя:
 а) металлические и бумажные наличные деньги, денежные средства на текущих счетах
 Это наиболее «ликвидные» деньги — наличность и средства, доступные сразу.
Демпинг — это продажа товара на внешнем рынке по цене:
 в) ниже цены аналогичного товара на внутреннем рынке страны – импортера
 Цель — захватить рынок за рубежом, часто за счёт временного снижения прибыли.
Сдвиг кривой производственных возможностей вправо означает:
 а) увеличение ресурсов
 Такой сдвиг показывает, что страна может производить больше благодаря росту ресурсов или улучшению технологий.
2. Этапы проектирования баз данных, основанных на различных моделях данных
Проектирование базы данных проходит несколько этапов, которые зависят от модели хранения: реляционной, объектно-ориентированной, иерархической и др. Основная цель — создать структуру, в которой данные хранятся эффективно, логично и безопасно.

Общие этапы проектирования БД:
1. Концептуальное проектирование
Определяются основные сущности (объекты) и связи между ними.
Используются ER-диаграммы.
Независимо от типа БД — общая логика.
2. Логическое проектирование
Перевод модели в формат конкретной БД:
для реляционной — таблицы с первичными/внешними ключами;
для объектной — классы и их отношения;
для иерархической — древовидные структуры.
Уточняется тип данных, связи, ограничения.
3. Физическое проектирование
Настройка хранения данных: индексирование, партиционирование, размещение на дисках.
Оптимизация для быстродействия и отказоустойчивости.

Особенности для разных моделей:
Реляционная модель
Строгая структура: таблицы, ключи, нормализация.
Основной инструмент — SQL.
Подходит для большинства бизнес-приложений.
Объектно-ориентированная модель
Данные хранятся в виде объектов, близко к логике программирования.
Поддержка вложенных структур и методов.
Хорошо подходит для инженерных и графических систем.
Иерархическая и сетевая модели
Устаревшие, но применяются в некоторых промышленных/гос. системах.
Требуют чёткой структуры "родитель—потомок".

Итог:
Выбор модели и этап проектирования зависит от задач. Однако последовательность концепция → логика → физика — универсальна для всех типов баз данных.
3. Специфика построения клиент-серверных приложений
Клиент-серверная архитектура — это структура приложения, где функции разделены между двумя уровнями:
Клиент — пользовательский интерфейс.
Сервер — логика обработки данных и взаимодействие с базой.

Особенности архитектуры:
1. Чёткое разделение обязанностей:
Клиент отвечает за отображение и ввод данных.
Сервер — за хранение, обработку, проверку данных.
2. Централизация:
Все данные хранятся на сервере — это повышает безопасность и облегчает резервное копирование.
3. Масштабируемость:
Сервер можно улучшить или масштабировать без замены клиентов.
В многопользовательской среде (интернет-магазины, CRM) это особенно важно.

Компоненты клиент-серверного приложения:
Клиент — веб-браузер, мобильное приложение, десктоп-программа.
Сервер приложений — логика (на Python, Java, PHP, .NET).
База данных — PostgreSQL, MySQL, MS SQL и др.
API — интерфейс общения между клиентом и сервером (обычно REST или GraphQL).

Преимущества:
Безопасность и контроль.
Разгрузка клиента (вся обработка на сервере).
Централизованные обновления.
Недостатки:
Требуется стабильная сеть.
Сложнее реализовать, чем файл-серверную архитектуру.

Итог:
Клиент-серверная архитектура — универсальное и современное решение, применимое как для локальных, так и распределённых систем. Она обеспечивает стабильную работу, масштабируемость и безопасность.