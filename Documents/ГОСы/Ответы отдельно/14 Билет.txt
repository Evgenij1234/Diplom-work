1. Тестовые вопросы:
Степень воздействия потоварного налога на объем продаж зависит от:
 а) наклонов линий спроса и предложения
 Чем более эластичен спрос или предложение, тем сильнее меняется объем продаж при введении налога.
Какие последствия вызывает проводимая монополистом ценовая дискриминация:
 в) растет прибыль и увеличивается объем продаж монополиста
 Монополист может продавать одному покупателю дороже, другому дешевле, что увеличивает общую прибыль и охват рынка.
Если номинальная заработная плата увеличилась на 10%, а инфляция — на 13%, то реальная зарплата:
 г) сократилась на 3%
 Реальная зарплата = номинальная – инфляция = 10% – 13% = –3%.
В кейнсианской теории спрос на деньги определяется мотивом:
 г) трансакционным, спекулятивным и предосторожности
 Люди хранят деньги для текущих расходов, страховки на случай непредвиденного и возможных выгодных вложений.
Предельная полезность – это:
 б) полезность, которую потребитель получает от потребления дополнительной единицы блага
 Например, удовольствие от одной лишней чашки кофе.

2. Сравнение архитектур реляционных и объектно-ориентированных СУБД
Реляционные СУБД (Relational DBMS) и Объектно-ориентированные СУБД (OODBMS) — это два разных подхода к хранению и организации данных. Оба типа имеют свои сильные и слабые стороны в зависимости от задач.

Реляционные СУБД:
Основа:
Данные хранятся в таблицах (строки и столбцы).
Используется SQL — стандартный язык запросов.
Преимущества:
Надёжность, проверенная временем.
Стандартизация (SQL).
Отлично подходит для транзакционной обработки (например, банки, ERP).
Недостатки:
Сложности при работе с сложными структурами данных (например, графы, вложенные объекты).
"Импеданс несоответствия" — разрыв между объектами в коде и таблицами в БД.

Объектно-ориентированные СУБД:
Основа:
Данные хранятся в виде объектов, как в ООП: с полями и методами.
Объекты могут содержать другие объекты (вложенность).
Преимущества:
Прямое отображение кода программы на базу данных.
Удобно хранить сложные структуры (например, конфигурации, документы).
Недостатки:
Нет стандартного языка, как SQL.
Меньше зрелых решений, ниже производительность при больших объемах данных.
Сложнее масштабировать.
Сравнительная таблица:
Вывод:
Реляционные СУБД лучше для классических бизнес-задач, где важна стабильность и скорость. Объектно-ориентированные — удобны при тесной интеграции с программным кодом и работе с "нестандартными" данными.

3. Масштабирование приложений. Миграция файл-серверных приложений в клиент-серверную среду
Масштабирование — это процесс увеличения возможностей системы справляться с ростом нагрузки (больше пользователей, данных, операций).

Типы масштабирования:
Вертикальное (scale-up):
Увеличение мощности одного сервера (CPU, RAM).
Простой, но дорогой путь. Есть пределы.
Горизонтальное (scale-out):
Добавление новых серверов.
Более гибко и эффективно, особенно для веб-приложений и микросервисов.

Файл-серверная архитектура:
Все данные и логика — в одном файле или папке, часто на сетевом диске.
Пользователи напрямую открывают и работают с файлами.
Недостатки:
Низкая безопасность.
Высокий риск повреждения данных.
Плохая производительность при одновременной работе.

Клиент-серверная архитектура:
Сервер — хранит данные и выполняет основную логику.
Клиент — интерфейс пользователя, делает запросы к серверу.
Пример: пользователь в приложении отправляет запрос → сервер обрабатывает и возвращает результат.

Миграция: как это происходит
Анализ текущей системы:
Что используется, какие данные, кто работает.
Разделение логики и интерфейса:
Отделяется бизнес-логика от пользовательского интерфейса.
Переход на СУБД:
Вместо файлов данные перемещаются в базу данных (например, PostgreSQL).
Создание API или серверного приложения:
Сервер обрабатывает запросы, управляет логикой.
Обновление клиента:
Новый клиент (программа, веб-приложение) работает с сервером по сети.

Преимущества клиент-серверной модели:
Безопасность.
Быстродействие.
Централизованное управление.
Легче масштабировать.

Вывод:
Переход с файл-серверной модели на клиент-серверную — это важный шаг в развитии любой системы, который обеспечивает устойчивую, масштабируемую и безопасную архитектуру.