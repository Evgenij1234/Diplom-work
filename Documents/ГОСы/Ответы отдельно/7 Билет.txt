1. Тестовые вопросы:
Сдвиг кривой производственных возможностей вправо означает:
 а) увеличение ресурсов
 Это показывает, что страна может производить больше благодаря новым технологиям или росту трудовых/природных ресурсов.
На рынке совершенной конкуренции отдельный продавец:
 а) не влияет на цену
 Он принимает рыночную цену как заданную, потому что конкуренция очень высокая.
Трансфертные платежи — это:
 а) выплаты домашним хозяйствам, не обусловленные предоставлением с их стороны товаров и услуг
 Примеры: пенсии, пособия — люди получают деньги, не производя товаров или услуг.
Отрицательный наклон кривой совокупного спроса (AD) связывают с:
 в) эффектом богатства
 При снижении цен люди чувствуют себя «богаче», потому что их сбережения покупают больше.
Предложение земли как фактора производства является:
 а) абсолютно неэластичным
 Площадь земли не изменяется от цены — её количество фиксировано.

2. Назначение и стадии нормализации реляционных баз данных
Нормализация — это процесс упорядочивания структуры таблиц в реляционной базе данных, чтобы избежать избыточности и ошибок, а также сделать систему хранения данных более понятной и эффективной.
Зачем нужна нормализация:
Убирает дублирование данных.
Упрощает обновление информации.
Обеспечивает логичность структуры базы.
Основные стадии нормализации:
Первая нормальная форма (1НФ):
Каждая ячейка таблицы содержит только одно значение.
Пример: нельзя хранить "Москва, Санкт-Петербург" в одной ячейке — надо разделить.
Вторая нормальная форма (2НФ):
Устранение частичной зависимости от составного ключа.
Каждое неключевое поле зависит от всего ключа, а не от части.
Третья нормальная форма (3НФ):
Нет транзитивной зависимости: поля не зависят друг от друга, только от ключа.
Пример: если есть "Город" и "Регион", и регион зависит от города — нужно вынести в отдельную таблицу.
Дополнительно:
Нормализация помогает сделать базу гибкой и удобной в обслуживании.
Иногда, наоборот, применяют денормализацию — чтобы ускорить выборку в больших системах отчётности.

3. Методология RAD (Rapid Application Development)
RAD (быстрая разработка приложений) — это методика, при которой информационные системы разрабатываются быстро, с активным участием заказчика и короткими итерациями. Цель — получить рабочий продукт в кратчайшие сроки, с возможностью его доработки в процессе.
Ключевые особенности RAD:
Быстрая разработка и запуск:
Вместо длительного планирования — разработка MVP (минимально жизнеспособной версии) и её тестирование.
Итеративный подход:
Проект делится на короткие циклы. После каждой итерации клиент оценивает результат и вносит корректировки.
Модульность:
Приложение создается как набор отдельных компонентов, которые можно менять и улучшать независимо.
Активное участие пользователя:
Клиент тесно работает с командой и быстро предоставляет обратную связь.
Прототипирование:
Делается не абстрактная схема, а реальный прототип — пусть и не финальный, но работающий.
Преимущества RAD:
Быстрый результат.
Минимизация недопонимания между заказчиком и разработчиком.
Гибкость — можно менять требования "на ходу".
Недостатки:
Не всегда подходит для крупных систем.
Требует высокой вовлеченности клиента.
Не рекомендуется, если проект должен быть строго задокументирован.
Итог:
RAD — отличный выбор, когда важна скорость, а требования могут меняться в процессе. Особенно часто применяется при разработке интерфейсов, веб-приложений и CRM-систем.